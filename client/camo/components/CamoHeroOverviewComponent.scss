$hero-overview-offset-y:  -11px !default;
$hero-overview-offset-x:  9px !default;
$hero-overview-spacing-x: 3px !default;

$hero-overview-portrait-height:       86px !default;
$hero-overview-portrait-spacing-y:    6px !default;
$hero-overview-portrait-dead-filter:  grayscale(100%) brightness(50%) !default;
$hero-overview-portrait-icon-width:   69px !default;
$hero-overview-portrait-icon-height:  68px !default;
$hero-overview-portrait-quantity-label: (
  "offset-y":                         21px,
  "offset-x":                         4px,
  "size":                             20px,
  "font-size":                        16px
) !default;

$hero-overview-ability-padding:  1px !default;
$hero-overview-ability-height:   ($hero-overview-portrait-height * .5) !default;
$hero-overview-ability-quantity-label: (
  "offset-y":                    3px,
  "offset-x":                    4px,
  "size":                        16px,
  "font-size":                   14px
) !default;

$hero-overview-item-padding:  1px !default;
$hero-overview-item-height:   ($hero-overview-portrait-height * .3334) !default;
$hero-overview-item-quantity-label: (
  "offset-y":                 2px,
  "offset-x":                 2px,
  "size":                     14px,
  "font-size":                13px
) !default;

@mixin quantity-label($dimensions) {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  bottom: map-get($dimensions, "offset-y");
  right: map-get($dimensions, "offset-x");
  background: no-repeat center / cover url('./assets/ui/icon-level.png');
  width: map-get($dimensions, "size");
  height: map-get($dimensions, "size");
  font-size: map-get($dimensions, "font-size");
  line-height: 1;
}

.HeroOverview {
  position: relative;

  .HeroOverview-player {
    position: absolute;
    top: $hero-overview-offset-y;

    .Hero {
      display: flex;
      height: $hero-overview-portrait-height;

      &.Hero--dead {
        filter: $hero-overview-portrait-dead-filter;

        .Hero-status {
          display: none;
        }
      }

      + .Hero {
        margin-top: $hero-overview-portrait-spacing-y;
      }

      .Hero-portrait {
        position: relative;

        .Hero-icon {
          width: $hero-overview-portrait-icon-width;
          height: $hero-overview-portrait-icon-height;
        }

        .Hero-level {
          @include quantity-label($hero-overview-portrait-quantity-label);
        }

        .Hero-status {
          position: absolute;
          bottom: 1px;
          left: -1px;
          background-color: #000;
          padding: 1px;

          .Progress {
            width: 70px;
            height: 6px;

            + .Progress {
              margin-top: 2px;
            }
          }
        }
      }

      .Hero-abilities {
        display: flex;
        flex-direction: column;
        margin: ($hero-overview-ability-padding * -1);

        .Hero-ability {
          height: $hero-overview-ability-height;
          position: relative;

          .Ability-icon {
            padding: $hero-overview-ability-padding;
            max-width: 100%;
            max-height: 100%;
          }

          .Ability-level {
            @include quantity-label($hero-overview-ability-quantity-label);
          }
        }

        &[data-amount="3"],
        &[data-amount="4"] {
          width: ($hero-overview-ability-height * 2);
        }
      }

      .Hero-items {
        display: flex;
        flex-direction: column;
        margin: ($hero-overview-item-padding * -1);

        .Hero-item {
          height: $hero-overview-item-height;
          position: relative;

          .Item-icon {
            padding: $hero-overview-item-padding;
            max-width: 100%;
            max-height: 100%;
          }

          .Item-charges {
            @include quantity-label($hero-overview-item-quantity-label);
          }
        }

        &[data-amount="4"],
        &[data-amount="5"],
        &[data-amount="6"] {
          width: ($hero-overview-item-height * 2);
        }
      }
    }

    @each $direction in left, right {
      $child-infix: "first";
      $flex-infix: "";

      @if $direction == "right" {
        $child-infix: "last";
        $flex-infix: "-reverse";
      }

      &:#{$child-infix}-child {
        #{$direction}: $hero-overview-offset-x;

        .Hero {
          flex-direction: row#{$flex-infix};
        }

        .Hero-abilities {
          margin-#{$direction}: $hero-overview-spacing-x;
          flex-wrap: wrap#{$flex-infix};
        }

        .Hero-items {
          margin-#{$direction}: $hero-overview-spacing-x;
          flex-wrap: wrap#{$flex-infix};
        }
      }
    }
  }
}
